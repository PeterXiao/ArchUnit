plugins {
    id "com.moowork.node" version "1.1.1"
}

ext.moduleName = 'com.tngtech.archunit.visual'

dependencies {
    compile project(path: ':archunit', configuration: 'shadow')
    compile dependency.guava
    compile dependency.gson
    compile dependency.slf4j

    testCompile dependency.log4j_api
    testCompile dependency.log4j_core
    testCompile dependency.log4j_slf4j
    testCompile dependency.junit4
    testCompile dependency.mockito
    testCompile dependency.assertj
    testCompile(dependency.assertj_guava) {
        exclude module: 'assertj-core'
        exclude module: 'guava'
    }
    testCompile dependency.json_assert
    testCompile dependency.junit_dataprovider
    testCompile project(path: ':archunit', configuration: 'tests')
}

shadowJar {
    exclude 'META-INF/maven/**'
}

/* We only depend on archunit core and nothing else */
install.repositories.mavenInstaller.pom.whenConfigured { pom ->
    pom.dependencies.removeAll {
        it.artifactId != 'archunit' || it.scope != 'compile'
    }
}

configurations {
    /* Exclude archunit from the shadow jar */
    runtime.exclude module: ':archunit'
}

def nodeVersion = '7.2.0'
def nodeDir = "${project.projectDir}/nodejs"

node {
    version = nodeVersion
    distBaseUrl = 'https://nodejs.org/dist'
    download = true
    workDir = file(nodeDir)
}

task setupNode(dependsOn: ['npmInstall']) {
    doLast {
        def subFolder = file(nodeDir).list().grep { it.contains(nodeVersion) }[0]
        println """
            >> Setting up NodeJs and running npm install...
            >> To run node from the command line, add the nodejs bin folder to your PATH:
            >> export PATH="${project.projectDir}/nodejs/${subFolder}/bin:\$PATH"
            """.stripIndent()
    }
}

task cleanNode(type: Delete) {
    delete 'nodejs', 'node_modules'
}

task cleanAll(dependsOn: [clean, cleanNode])

task mocha(type: Exec, dependsOn: 'setupNode') {
    executable = 'npm'
    args = ['run', 'test']
}

task eslint(type: Exec, dependsOn: 'setupNode') {
    executable = 'npm'
    args = ['run', 'lint']
}

def reportOutputDir = "${sourceSets.main.output.resourcesDir}/com/tngtech/archunit/visual/report"

task createReportDir {
    doFirst {
        file(reportOutputDir).mkdirs()
    }
}

task webpack(type: Exec, dependsOn: ['setupNode', 'createReportDir', 'mocha', 'eslint']) {
    executable = 'npm'
    args = ['run', 'createJsBundle', '--', '--env.buildPath=' + reportOutputDir]
}

task bundleHtml(type: Exec, dependsOn: 'webpack') {
    executable = 'npm'
    args = ['run', 'bundleHtml',
            '--',
            '--redirect', 'build://|' + reportOutputDir + '/',
            '--out-file', reportOutputDir + '/report.html',
            'src/main/app/report/report.html']
}

task deleteJsBundles(type: Delete, dependsOn: 'bundleHtml') {
    delete fileTree(reportOutputDir) {
        include '**/*.js'
    }
}

task buildReport(dependsOn: ['mocha', 'eslint', 'webpack', 'bundleHtml', 'deleteJsBundles']) {}

assemble.dependsOn buildReport